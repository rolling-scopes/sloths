name: Build

on:
  push:
    branches: [main]

jobs:
  deploy_build_client:
    name: Build Sloths
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Combine
        uses: satackey/action-js-inline@v0.0.2
        id: combine
        with:
          # Edit the following line to install packages required to run your script.
          required-packages: axios
          script: |
            const fs = require("fs");
            const path = require("path");
            const dirs = fs.readdirSync("./stickers", { withFileTypes: true })
              .filter((dirent) => dirent.isDirectory())
              .map((dirent) => dirent.name)
              .filter((name) => !name.startsWith("."));
            const result = {
              stickers: [],
            };
            dirs.forEach((dir) => {
              const metadata = require(path.resolve(`./stickers/${dir}/metadata.json`));
              result.stickers.push({ ...metadata, id: dir });
            });
            fs.writeFileSync("./stickers/metadata.json", JSON.stringify(result, null, 2));

      - name: Create file list
        uses: satackey/action-js-inline@v0.0.2
        with:
          script: |
            const fs = require('fs');
            const fileNames = fs
              .readdirSync('./cleaned', { withFileTypes: true })
              .filter(dirent => dirent.isFile())
              .map(dirent => dirent.name)
              .filter(name => !name.startsWith('.'));
            fs.writeFileSync('./cleaned/filelist.json', JSON.stringify(fileNames, null, 2));

      - name: Create merch data
        uses: satackey/action-js-inline@v0.0.2
        with:
          script: |
            const fs = require("fs");
            const path = require("path");
            const previewFormat = [".webp", ".png"];
            const noDownloadFormat = [".json", ".webp"];
            function capitalizeWords(str) {
              return str.replace(/-/g, " ").replace(/\b\w/g, (char) => char.toUpperCase());
            }
            function getDirectoryStructure(dir) {
              const result = {};
              const items = fs.readdirSync(dir, { withFileTypes: true });
              const files = items.filter((item) => !item.isDirectory());
              const directories = items.filter((item) => item.isDirectory());
              if (directories.length === 0 && files.length > 0) {
                const preview = files.filter((file) => previewFormat.some((format) => file.name.endsWith(format)))
                  .map((file) => path.join(dir, file.name));
                const download = files.filter((file) => !noDownloadFormat.some((format) => file.name.endsWith(format)))
                  .map((file) => path.join(dir, file.name));
                return {
                  name: capitalizeWords(path.basename(dir)),
                  preview: preview,
                  download: download,
                };
              }
              directories.forEach((directory) => {
                result[directory.name] = getDirectoryStructure(
                  path.join(dir, directory.name)
                );
              });
              return result;
            }
            const merchStructure = getDirectoryStructure("./merch");
            const assetsStructure = getDirectoryStructure("./assets");
            const stickersStructure = getDirectoryStructure("./stickers");
            const combinedStructure = {
              merch: merchStructure,
              assets: assetsStructure,
              stickers: stickersStructure,
            };
            fs.writeFileSync("./merch/filelist.json", JSON.stringify(combinedStructure, null, 2));

      - name: Upload to CDN
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID  }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY  }}
          AWS_DEFAULT_REGION: eu-central-1
        run: |
          aws s3 cp stickers s3://cdn.rs.school/sloths/stickers --recursive --cache-control "public,max-age=300,immutable"
          aws s3 cp cleaned s3://cdn.rs.school/sloths/cleaned --recursive --cache-control "public,max-age=300,immutable"
          aws s3 cp assets s3://cdn.rs.school/assets --recursive --cache-control "public,max-age=300,immutable"
          aws s3 cp merch s3://cdn.rs.school/merch --recursive --cache-control "public,max-age=300,immutable"
